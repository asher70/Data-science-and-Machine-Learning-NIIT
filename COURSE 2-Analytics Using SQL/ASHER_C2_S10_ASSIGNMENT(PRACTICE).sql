-- SPRINT 10  (ASSIGNMENT(PRACTISCE))
-- PROJECT-PART 2
-- DATA DRIVEN ANALYTICS PROJECT-PART 2?
USE `modelcarsdb`;

-- Task 1: Employee Data Analysis

-- 1. Find the total number of employees.
SELECT COUNT(employeeNumber) AS 
"number of employees"  FROM `employees`;
-- THERE ARE 23 EMPLOYEES
-- 2. List all employees with their basic information.
SELECT employeeNumber,CONCAT(firstName,' ',lastName)AS FullName 
,jobTitle,email,officeCode FROM `employees`;
-- 3. Count the number of employees holding each job title.
SELECT jobTitle,count(jobTitle) as "number of employees"
  FROM `employees`
group by(jobTitle) order by 
count(jobTitle) desc;
-- sales rep has highest no of employees and rest all  joob title has one employee
-- this indicates that the car company is focusing more on sales that to employ large people.

 -- 4. Find the employees who don't have a manager (reports To is NULL).
SELECT employeeNumber,CONCAT(firstName,' ',lastName)AS FullName 
,jobTitle FROM `employees` where jobTitle not like "%Manager%"
order by 
 jobTitle desc;
 
 -- we used not like on jobtitle column to 
 -- filter columns that don't have manager
-- which filtered employees who don't have manager
-- there were 4 positions in job field  filtered out 'VP Sales','VP Marketing'
-- ,'Sales Rep','President' the employees working under them 
-- that do not have manager

 -- 5. Calculate total sales generated by each sales
-- representative.


select e.employeeNumber,CONCAT(e.firstName,' ',e.lastName) as FullName,
e.jobTitle ,sum(odd.priceEach*odd.quantityOrdered) as
 "total sales"   FROM `employees` as e join offices as o on 
e.officeCode=o.officeCode join customers as c
 on o.city=c.city
 join orders as od on
 c.customerNumber=od.customerNumber 
 join orderdetails as odd
 on od.orderNumber=odd.orderNumber
 where e.jobTitle='Sales Rep' 
 group by e.employeeNumber,FullName,
e.jobTitle  order by sum(odd.priceEach*odd.quantityOrdered) desc  ;

-- generated total sales generated by all employes in sales representative
-- we had to join 4 table to retreve this info these are the names of the table
-- employees ,customers,orders,orderdetails.
-- we joined employees and offices tables based on  common column officecode in both table
-- we joined offices and customers tables based on city column . 
-- we joined on customernumber on customers and orders table,we joined on
--  ordernumber which was common to orders and orderdetails.
-- we selected  from employees table sales representation column 
-- and later grouped by employees tables employeeNumber 
-- ,fullname(joining first name and last name column using concat fn),jobtitle
-- we arranged in desc order based on totalsales(sum(odd.priceEach*odd.quantityOrdered))
-- 'George Vanauf' and 'Foon Yue Tseng' rep most sales 497941.50 each
-- 'Barry Jones' and 'Larry Bott' generated least among other sales rep which is
--  110142.88 each

-- 6. Find the most profitable sales representative based on total
-- sales.
select e.employeeNumber,CONCAT(e.firstName,' ',e.lastName) as FullName,
e.jobTitle ,sum(odd.priceEach*odd.quantityOrdered) as
 "total sales"   FROM `employees` as e join offices as o on 
e.officeCode=o.officeCode join customers as c
 on o.city=c.city
 join orders as od on
 c.customerNumber=od.customerNumber 
 join orderdetails as odd
 on od.orderNumber=odd.orderNumber
 where e.jobTitle='Sales Rep' 
 group by e.employeeNumber,FullName,
e.jobTitle  order by sum(odd.priceEach*odd.quantityOrdered) desc limit 2  ;
-- 'George Vanauf' and 'Foon Yue Tseng' rep most sales 497941.50 each.

-- 7. Find the names of all employees who have sold more than
-- the average sales amount for their office.
select e.employeeNumber,CONCAT(e.firstName,' ',e.lastName) as FullName,
e.jobTitle ,sum(odd.priceEach*odd.quantityOrdered) as
 "TotalSales"   FROM `employees` as e join offices as o on 
e.officeCode=o.officeCode join customers as c
 on o.city=c.city
 join orders as od on
 c.customerNumber=od.customerNumber 
 join orderdetails as odd
 on od.orderNumber=odd.orderNumber
 group by e.employeeNumber,FullName,
e.jobTitle  
having TotalSales> ANY(select avg(odd.priceEach*odd.quantityOrdered)
FROM `employees` as e join offices as o on 
e.officeCode=o.officeCode join customers as c
 on o.city=c.city
 join orders as od on
 c.customerNumber=od.customerNumber 
 join orderdetails as odd
 on od.orderNumber=odd.orderNumber 
 group by o.officeCode
 )
order by sum(odd.priceEach*odd.quantityOrdered) desc  ;
-- we  have used subqueiry with joins where in the outer query  we selected employeeNumber,FullName,jobTitle and TotalSales and then
-- we checked whether it was greater than  any average sales as  per office.


-- Task 2: Order Analysis

-- 1. Find the average order amount for each customer.

select o.customerNumber,concat(c.contactFirstName," ",c.contactLastName)
 as FullName ,avg(od.quantityOrdered*od.priceEach) 
as "Average_Order_Amt" from orders
 as o join orderdetails as od  on o.orderNumber=od.orderNumber  
 join customers as c on c.customerNumber=o.customerNumber
 group by o.customerNumber order by Average_Order_Amt desc;
-- this query is used to display customer,with their name and Average_Order_Amt
-- 'Leslie Murphy' has highest Average_Order_Amt of '4139.920588'.
-- customers had avg order amount ranges between 2000 and 4000 range.

-- 2. Find the number of orders placed in each month.
select monthname(orderDate) as "monthnames",count(orderNumber) as number_of_orders
  from orders group by monthnames order by number_of_orders desc ;
  --  november had 63 orders making it the most ordered month
  -- August had least order 17

-- 3.Identify orders that are still pending shipment (status = 'Pending').
select orderNumber,status from orders 
where status ='Pending' ;
-- since there was no (status = 'Pending')
-- we used  not in 'In Process' in place of 'Shipped','Cancelled','Resolved','Disputed' to filter out pending by removing not pending
select orderNumber,status from orders 
where status not in('Shipped','Cancelled','Resolved','Disputed');

-- 4. List orders along with customer details.
select o.orderNumber,c.customerNumber,c.customerName,concat(c.contactFirstName," ",c.contactLastName) as Full_name
 ,c.phone,c.addressLine1,c.city,c.postalCode,c.country  from orders as o join
 customers as c on o.customerNumber=c.customerNumber group by c.customerNumber,o.orderNumber;
-- listed orders with customer orders keeping ordernumber unique as mentioned in the questions

-- 5. Retrieve the most recent orders (based on order date).
select o.orderNumber,c.customerNumber,orderDate,c.customerName,concat(c.contactFirstName," ",c.contactLastName) as Full_name
 ,c.phone,c.addressLine1,c.city,c.postalCode,c.country  from orders as o join
 customers as c on o.customerNumber=c.customerNumber group by c.customerNumber,
 o.orderNumber order by orderDate desc limit 2;
 -- based on order date 2 orders by La Rochelle Gifts and Euro+ Shopping Channel  have ordered most recently on '2005-05-31'.

select * from orderdetails;
select * from orders;
select * from `customers`;
-- 6.Calculate total sales for each order.
SELECT o.orderNumber,sum(od.quantityOrdered*od.priceEach)  as total_sales
from orders as o join orderdetails as od 
on o.orderNumber=od.orderNumber group by(o.orderNumber) ;
-- 7. Find the highest-value order based on total sales.
SELECT o.orderNumber,sum(od.quantityOrdered*od.priceEach)  as total_sales
from orders as o join orderdetails as od 
on o.orderNumber=od.orderNumber group by(o.orderNumber)
 order by (total_sales ) desc limit 1 ;
-- order no '10165' has ordered most with a sales of  67392.85 $.

 -- 8. List all orders with their corresponding order details.

 select o.orderNumber,od.productCode,od.quantityOrdered,
 od.priceEach,od.orderLineNumber from
 orders as o join orderdetails  as od 
 on o.orderNumber=od.orderNumber ;
--  9. List the most frequently ordered products.
 select od.orderNumber,
max(p.productName) as "ordered product",
count(od.orderNumber) as ordered_products from
 orders as o join orderdetails  as od 
 on o.orderNumber=od.orderNumber join products 
 as p  on od.productCode=p.productCode group by
 od.orderNumber order by ordered_products desc ;
 

-- 10. Calculate total revenue for each order.
 select od.orderNumber,
max(p.productName) as "ordered product",count(od.orderNumber) as ordered_products  
,sum(od.quantityOrdered*priceEach) as total_revenue from
 orders as o join orderdetails  as od 
 on o.orderNumber=od.orderNumber join products 
 as p  on od.productCode=p.productCode group by
 od.orderNumber order by ordered_products desc ;
 
-- 11. Identify the most profitable orders based on total revenue. 
 select od.orderNumber,
max(p.productName) as "ordered product",count(od.orderNumber) as ordered_products  
,sum(od.quantityOrdered*priceEach) as total_revenue from
 orders as o join orderdetails  as od 
 on o.orderNumber=od.orderNumber join products 
 as p  on od.productCode=p.productCode group by
 od.orderNumber order by total_revenue desc limit 1;
 
 -- Diamond T620 Semi-Skirted Tanker is the most 
 -- profitable orders with a total revenue of 67392.85 $
 
-- 12. List all orders with detailed product information.
select od.orderNumber,p.productName,p.productLine,p.productScale,
p.productVendor,p.productDescription,p.quantityInStock,p.buyPrice,
p.MSRP from orders as o  join orderdetails as od 
on  o.orderNumber=od.orderNumber join products as p
 on od.productCode=p.productCode;


-- 13. Identify orders with delayed shipping (shippedDate >
-- requiredDate).
select orderNumber,shippedDate,requiredDate
 from orders where shippedDate>requiredDate;
 -- there is only one  entry with delayed which should have been done on 2003-10-31
 -- but shipped after around 2 months at 2003-12-26 .


-- 14. Find the most popular product combinations within orders. 
 select o.productCode as o1,o.productCode as o2,
 count(*) as "product_combinations"from
 orderdetails as o cross 
 join products group by o1,o2 order by 
 product_combinations desc limit 1;
-- 'S18_3232' is the most popular product combination with a count of 5830


-- 15. Calculate revenue for each order and identify the
-- top 10 most profitable.
select od.orderNumber ,sum(od.quantityOrdered*od.priceEach) as revenue  
from orderdetails as od join orders as o on od.orderNumber=o.orderNumber
group by(od.orderNumber) order by revenue desc limit 10 ;

-- 16. Create a trigger that automatically updates a customer's credit limit after a new order is placed, reducing it by the order total.
delimiter $$
create  trigger ccl 
after insert on orders 
for each row 
begin
declare totalorder decimal(10,2);
select sum(od.quantityOrdered*od.priceEach) into totalorder
 from orderdetails as od where od.orderNumber=
 new.orderNumber;
 update customers set creditLimit=creditLimit-totalorder 
 where customerNumber=new.customerNumber;
end;$$

insert into orders(orderNumber,orderDate,requiredDate,status,customerNumber)
values(10426,curdate(),curdate(),"placed",103)

-- 17. Create a trigger that logs product quantity changes
-- whenever an order detail is inserted or updated.

select * from orderdetails;-- orderNumber,quantityOrdered
select * from orders;-- orderNumber,,customerNumber
SELECT * FROM PRODUCTS;
CREATE TABLE NEWT(orderNumber INT,productCode VARCHAR(30),quantityOrdered INT ,orderLineNumber INT);
delimiter $$
create trigger logsp after 
insert  on orderdetails for each row
begin
INSERT INTO NEWT(orderNumber,productCode,quantityOrdered,orderLineNumber)
VALUES(NEW.orderNumber,NEW.productCode,NEW.quantityOrdered,NEW.orderLineNumber);
end; $$

INSERT INTO orderdetails(orderNumber,productCode,quantityOrdered,priceEach,orderLineNumber)
VALUES(10100,'S50_1514',25,120.00,1);
SELECT * FROM NEWT;
